"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createTypedObjectParams = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _parser = require("@babel/parser");
var t = _interopRequireWildcard(require("@babel/types"));
var _case = require("case");
var _polarJsonToTs = require("polar-json-to-ts");
var _babel = require("./babel");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
var createTypedObjectParams = exports.createTypedObjectParams = /*#__PURE__*/function () {
  var _ref = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(jsonschema, definitions) {
    var _jsonschema$propertie;
    var camelize,
      keys,
      typedParams,
      testHash,
      testAST,
      declarationAST,
      interfaceAST,
      paramsAST,
      _iterator,
      _step,
      paramAST,
      paramName,
      paramType,
      params,
      obj,
      _args = arguments;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          camelize = _args.length > 2 && _args[2] !== undefined ? _args[2] : true;
          keys = Object.keys((_jsonschema$propertie = jsonschema.properties) !== null && _jsonschema$propertie !== void 0 ? _jsonschema$propertie : {});
          if (keys.length) {
            _context.next = 4;
            break;
          }
          return _context.abrupt("return");
        case 4:
          jsonschema.definitions = definitions;
          typedParams = []; // use json-to-ts generated type here
          _context.next = 8;
          return (0, _polarJsonToTs.compile)(jsonschema, 'testParamName', {
            additionalProperties: false,
            bannerComment: '',
            declareExternallyReferenced: true
          });
        case 8:
          testHash = _context.sent;
          testAST = (0, _parser.parse)(testHash, {
            allowImportExportEverywhere: true,
            plugins: ['typescript']
          });
          declarationAST = testAST.program.body;
          interfaceAST = declarationAST.find(function (interfaceCurrent) {
            return interfaceCurrent.declaration.id.name === 'testParamName';
          }).declaration; // asset if declaration is there
          // declarationAST.type = "ExportNamedDeclaration"
          // const interfaceAST = declarationAST.declaration as t.TSInterfaceDeclaration;
          paramsAST = interfaceAST.body.body;
          _iterator = _createForOfIteratorHelper(paramsAST);
          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              paramAST = _step.value;
              paramName = paramAST.key.name;
              paramType = paramAST.typeAnnotation;
              typedParams.push((0, _babel.propertySignature)(camelize ? (0, _case.camel)(paramName) : paramName, paramType, false // check for optional later: TODO
              ));
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
          params = keys.map(function (prop) {
            return t.objectProperty(camelize ? t.identifier((0, _case.camel)(prop)) : t.identifier(prop), camelize ? t.identifier((0, _case.camel)(prop)) : t.identifier(prop), false, true);
          });
          obj = t.objectPattern((0, _toConsumableArray2["default"])(params));
          obj.typeAnnotation = t.tsTypeAnnotation(t.tsTypeLiteral([].concat(typedParams)));
          return _context.abrupt("return", obj);
        case 19:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  return function createTypedObjectParams(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();
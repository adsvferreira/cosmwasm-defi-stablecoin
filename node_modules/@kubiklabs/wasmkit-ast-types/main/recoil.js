"use strict";

var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createWasmRecoilMethod = exports.createRecoilSelectors = exports.createRecoilSelector = exports.createRecoilQueryClientType = exports.createRecoilQueryClient = void 0;
var t = _interopRequireWildcard(require("@babel/types"));
var _case = require("case");
var _utils = require("./utils");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
var createWasmRecoilMethod = exports.createWasmRecoilMethod = function createWasmRecoilMethod(jsonschema) {
  var _jsonschema$propertie;
  var underscoreName = Object.keys(jsonschema.properties)[0];
  var methodName = (0, _case.camel)(underscoreName);
  var responseType = (0, _case.pascal)("".concat(methodName, "Response"));
  var properties = (_jsonschema$propertie = jsonschema.properties[underscoreName].properties) !== null && _jsonschema$propertie !== void 0 ? _jsonschema$propertie : {};
  if (Object.keys(properties).length > 0) {} else {}
};
var createRecoilSelector = exports.createRecoilSelector = function createRecoilSelector(keyPrefix, QueryClient, methodName) {
  // const propertyNames = getMessageProperties(queryMsg)
  //   .map(method => Object.keys(method.properties)?.[0])
  //   .filter(Boolean);

  // const methods = getMessageProperties(queryMsg)
  //   .map(schema => createWasmRecoilMethod(schema))

  var selectorName = (0, _case.camel)("".concat(methodName, "Selector"));
  var responseType = (0, _case.pascal)("".concat(methodName, "Response"));
  var getterKey = (0, _case.camel)("".concat(keyPrefix).concat((0, _case.pascal)(methodName)));
  return t.exportNamedDeclaration(t.variableDeclaration('const', [t.variableDeclarator(t.identifier(selectorName), (0, _utils.callExpression)(t.identifier('selectorFamily'), [t.objectExpression([t.objectProperty(t.identifier('key'), t.stringLiteral(getterKey)), t.objectProperty(t.identifier('get'), t.arrowFunctionExpression([t.objectPattern([t.objectProperty(t.identifier('params'), t.identifier('params'), false, true), t.restElement(t.identifier('queryClientParams'))])], t.arrowFunctionExpression([t.objectPattern([t.objectProperty(t.identifier('get'), t.identifier('get'), false, true)])], t.blockStatement([t.variableDeclaration('const', [t.variableDeclarator(t.identifier('client'), t.callExpression(t.identifier('get'), [t.callExpression(t.identifier('queryClient'), [t.identifier('queryClientParams')])]))]), t.ifStatement(t.unaryExpression('!', t.identifier('client')), t.returnStatement(null), null), t.returnStatement(t.awaitExpression(t.callExpression(t.memberExpression(t.identifier('client'), t.identifier(methodName)), [
  // t.identifier('params')
  t.spreadElement(t.identifier('params'))])))]), true)))])], t.tsTypeParameterInstantiation([t.tsUnionType([t.tsTypeReference(t.identifier(responseType)), t.tsUndefinedKeyword()]), t.tsIntersectionType([t.tsTypeReference(t.identifier('QueryClientParams')), t.tsTypeLiteral([t.tsPropertySignature(t.identifier('params'), t.tsTypeAnnotation(t.tsTypeReference(t.identifier('Parameters'), t.tsTypeParameterInstantiation([t.tsIndexedAccessType(t.tsTypeReference(t.identifier(QueryClient)), t.tsLiteralType(t.stringLiteral(methodName)))]))))])])])))]));
};
var createRecoilSelectors = exports.createRecoilSelectors = function createRecoilSelectors(keyPrefix, QueryClient, queryMsg) {
  return (0, _utils.getMessageProperties)(queryMsg).map(function (schema) {
    var underscoreName = Object.keys(schema.properties)[0];
    var methodName = (0, _case.camel)(underscoreName);
    return createRecoilSelector(keyPrefix, QueryClient, methodName);
  });
};
var createRecoilQueryClientType = exports.createRecoilQueryClientType = function createRecoilQueryClientType() {
  return {
    type: 'TSTypeAliasDeclaration',
    id: {
      type: 'Identifier',
      name: 'QueryClientParams'
    },
    typeAnnotation: {
      type: 'TSTypeLiteral',
      members: [{
        type: 'TSPropertySignature',
        key: {
          type: 'Identifier',
          name: 'contractAddress'
        },
        computed: false,
        typeAnnotation: {
          type: 'TSTypeAnnotation',
          typeAnnotation: {
            type: 'TSStringKeyword'
          }
        }
      }]
    }
  };
};
var createRecoilQueryClient = exports.createRecoilQueryClient = function createRecoilQueryClient(keyPrefix, QueryClient) {
  var getterKey = (0, _case.camel)("".concat(keyPrefix, 'QueryClient'));
  return t.exportNamedDeclaration(t.variableDeclaration('const', [t.variableDeclarator(t.identifier('queryClient'), (0, _utils.callExpression)(t.identifier('selectorFamily'), [t.objectExpression([t.objectProperty(t.identifier('key'), t.stringLiteral(getterKey)), t.objectProperty(t.identifier('get'), t.arrowFunctionExpression([t.objectPattern([t.objectProperty(t.identifier('contractAddress'), t.identifier('contractAddress'), false, true)])], t.arrowFunctionExpression([t.objectPattern([t.objectProperty(t.identifier('get'), t.identifier('get'), false, true)])], t.blockStatement([t.variableDeclaration('const', [t.variableDeclarator(t.identifier('client'), t.callExpression(t.identifier('get'), [t.identifier('cosmWasmClient')]))]), t.ifStatement(t.unaryExpression('!', t.identifier('client')), t.returnStatement(null), null), t.returnStatement(t.newExpression(t.identifier(QueryClient), [t.identifier('client'), t.identifier('contractAddress')]))]), false)))])], t.tsTypeParameterInstantiation([t.tsUnionType([t.tsTypeReference(t.identifier(QueryClient)), t.tsUndefinedKeyword()]), t.tsTypeReference(t.identifier('QueryClientParams'))])))]));
};